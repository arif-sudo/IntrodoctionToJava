package JavaKeywords19_09;

public class Keywords {
    // A list of Java keywords are given below:
    // 1) abstract
    // Java abstract keyword is used to declare an abstract class.
    // An abstract class can provide the implementation of the interface.
    // It can have abstract and non-abstract methods.

    // 2) catch
    // Java catch keyword is used to catch the exceptions generated by try statements. It must be used after the try block only.

    // 3) do
    // Java do keyword is used in the control statement to declare a loop. It can iterate a part of the program several times.

    // 4) enum
    // Java enum keyword is used to define a fixed set of constants. Enum constructors are always private or default.

    // 5) extends
    // Java extends keyword is used to indicate that a class is derived from another class or interface.

    // 6) final
    // Java final keyword is used to indicate that a variable holds a constant value.
    // It is used with a variable.
    // It is used to restrict the user from updating the value of the variable.

    // 7) finally
    // Java finally keyword indicates a block of code in a try-catch structure.
    // This block is always executed whether an exception is handled or not.

    // 8) implements
    // Java implements keyword is used to implement an interface.

    // 9) instanceof
    // Java instanceof keyword is used to test whether the object is an instance of the specified class or implements an interface.

    // 10) interface
    // Java interface keyword is used to declare an interface. It can have only abstract methods.
    // The interface in Java is a mechanism to achieve abstraction.

    // 11) native
    // Java native keyword is used to specify that a method is implemented in native code using JNI (Java Native Interface).

    // 12) new
    //  Java new keyword is used to create new objects.

    // 13) null
    // Java null keyword is used to indicate that a reference does not refer to anything. It removes the garbage value.

    // 14) package
    // Java package keyword is used to declare a Java package that includes the classes.

    // 15) private
    // Java private keyword is an access modifier.
    // It is used to indicate that a method or variable may be accessed only in the class in which it is declared.

    // 16) protected
    //  Java protected keyword is an access modifier.
    //  It can be accessible within the package and outside the package but through inheritance only.
    //  It can't be applied with the class

    // 17) public
    // Java public keyword is an access modifier.
    // It is used to indicate that an item is accessible anywhere. It has the widest scope among all other modifiers.

    // 18) return
    // Java return keyword is used to return from a method when its execution is complete.

    // 19) static
    // Java static keyword is used to indicate that a variable or method is a class method.
    // The static keyword in Java is mainly used for memory management.

    // 20) strictfp
    // Java strictfp keyword is used to restrict the floating-point calculations to ensure portability.

    // 21) super
    // Java super keyword is a reference variable that is used to refer to parent class objects.
    // It can be used to invoke the immediate parent class method

    // 22) synchronized
    // Java synchronized keyword is used to specify the critical sections or methods in multithreaded code.

    // 23) this
    // Java this keyword can be used to refer the current object in a method or constructor

    // 24) throw
    // The Java throw keyword is used to explicitly throw an exception.
    // The throw keyword is mainly used to throw custom exceptions. It is followed by an instance.

    // 25) throws
    // The Java throws keyword is used to declare an exception. Checked exceptions can be propagated with throws.

    // 26) transient
    // Java transient keyword is used in serialization.
    // If you define any data member as transient, it will not be serialized.
    // In Java, Serialization is used to convert an object into a stream of the byte

    // 27) void
    // Java void keyword is used to specify that a method does not have a return value.

    // 28) volatile
    // Java volatile keyword is used to indicate that a variable may change asynchronously.

}
